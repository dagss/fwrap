python module f2py_comparison_f2py
    interface

      subroutine func(n, m, x)
      integer, dimension(n, m), intent(in,out,overwrite) :: x
      integer optional,check(shape(x,0)==n),depend(x) :: n=shape(x,0)
      integer optional,check(shape(x,1)==m),depend(x) :: m=shape(x,1)
      end subroutine

      subroutine out_arr(n, m, xout)
      integer, dimension(n, m), intent(out) :: xout
      integer intent(in) :: n
      integer intent(in) :: m
      end subroutine

      subroutine nodeps(arr, n)
      integer, dimension(n), intent(in, out) :: arr
      integer, intent(in) :: n
      end subroutine

      subroutine array_given_n(arr, n)
      integer, dimension(n), intent(in, out), depend(n) :: arr
      integer, intent(in) :: n
      end subroutine

      subroutine array_given_n_argrev(n, arr)
      integer, dimension(n), intent(in, out), depend(n) :: arr
      integer, intent(in) :: n
      end subroutine

      subroutine n_given_array(arr, n)
      integer, dimension(n), intent(in, out) :: arr
      integer, intent(in), depend(arr) :: n
      end subroutine

      subroutine n_given_array_argrev(n, arr)
      integer, dimension(n), intent(in, out) :: arr
      integer, intent(in), depend(arr) :: n
      end subroutine


      subroutine swilk(x,n,a,n2)
        real dimension(n),intent(in) :: x
        integer depend(x),intent(hide) :: n = shape(x,0)
        integer intent(hide),depend(n) :: n2=n/2
        real intent(in,out), dimension(n2), depend(n2) :: a
      end subroutine swilk

!!$      subroutine tricky_case(n, arr)
!!$        integer, optional, dimension(n), intent(in,out) :: arr = 0.
!!$        integer, intent(in) :: n = len(arr) - 2
!!$      end subroutine tricky_case


    end interface
end python module f2py_comparison_f2py

